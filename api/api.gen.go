// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ReqWSE defines model for ReqWSE.
type ReqWSE struct {
	End     *time.Time `json:"end,omitempty"`
	Request *Request   `json:"request,omitempty"`
	Start   *time.Time `json:"start,omitempty"`
}

// ReqWT defines model for ReqWT.
type ReqWT struct {
	Request *Request   `json:"request,omitempty"`
	Time    *time.Time `json:"time,omitempty"`
}

// Request defines model for Request.
type Request struct {
	RequestNumber *int `json:"requestNumber,omitempty"`
	SourceNumber  *int `json:"sourceNumber,omitempty"`
}

// GetAllBufProcessedRequestsParams defines parameters for GetAllBufProcessedRequests.
type GetAllBufProcessedRequestsParams struct {
	BufNum int `form:"bufNum" json:"bufNum"`
}

// GetDeviceDoneRequestsParams defines parameters for GetDeviceDoneRequests.
type GetDeviceDoneRequestsParams struct {
	DevNum int `form:"devNum" json:"devNum"`
}

// GetAllGenRequestsParams defines parameters for GetAllGenRequests.
type GetAllGenRequestsParams struct {
	SourceNum int `form:"sourceNum" json:"sourceNum"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get array of all buffer numbers
	// (GET /buffer/getAll)
	GetAllBuffers(w http.ResponseWriter, r *http.Request)
	// Get all requests processed by buffer
	// (GET /buffer/getAllProcessed)
	GetAllBufProcessedRequests(w http.ResponseWriter, r *http.Request, params GetAllBufProcessedRequestsParams)
	// Get array of all device numbers
	// (GET /device/getAll)
	GetAllDevices(w http.ResponseWriter, r *http.Request)
	// Get all requests done by device
	// (GET /device/getDone)
	GetDeviceDoneRequests(w http.ResponseWriter, r *http.Request, params GetDeviceDoneRequestsParams)
	// Get all done requests
	// (GET /request/getAllDone)
	GetAllDoneRequests(w http.ResponseWriter, r *http.Request)
	// Get all rejected requests
	// (GET /request/getAllRejected)
	GetAllRejectedRequests(w http.ResponseWriter, r *http.Request)
	// Get array of all source numbers
	// (GET /source/getAll)
	GetAllSources(w http.ResponseWriter, r *http.Request)
	// Get all requests generated by source
	// (GET /source/getGenerated)
	GetAllGenRequests(w http.ResponseWriter, r *http.Request, params GetAllGenRequestsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllBuffers operation middleware
func (siw *ServerInterfaceWrapper) GetAllBuffers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllBuffers(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllBufProcessedRequests operation middleware
func (siw *ServerInterfaceWrapper) GetAllBufProcessedRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllBufProcessedRequestsParams

	// ------------- Required query parameter "bufNum" -------------

	if paramValue := r.URL.Query().Get("bufNum"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "bufNum"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "bufNum", r.URL.Query(), &params.BufNum)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bufNum", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllBufProcessedRequests(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllDevices operation middleware
func (siw *ServerInterfaceWrapper) GetAllDevices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllDevices(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDeviceDoneRequests operation middleware
func (siw *ServerInterfaceWrapper) GetDeviceDoneRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeviceDoneRequestsParams

	// ------------- Required query parameter "devNum" -------------

	if paramValue := r.URL.Query().Get("devNum"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "devNum"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "devNum", r.URL.Query(), &params.DevNum)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "devNum", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDeviceDoneRequests(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllDoneRequests operation middleware
func (siw *ServerInterfaceWrapper) GetAllDoneRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllDoneRequests(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllRejectedRequests operation middleware
func (siw *ServerInterfaceWrapper) GetAllRejectedRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllRejectedRequests(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllSources operation middleware
func (siw *ServerInterfaceWrapper) GetAllSources(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllSources(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllGenRequests operation middleware
func (siw *ServerInterfaceWrapper) GetAllGenRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllGenRequestsParams

	// ------------- Required query parameter "sourceNum" -------------

	if paramValue := r.URL.Query().Get("sourceNum"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sourceNum"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sourceNum", r.URL.Query(), &params.SourceNum)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sourceNum", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllGenRequests(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/buffer/getAll", wrapper.GetAllBuffers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/buffer/getAllProcessed", wrapper.GetAllBufProcessedRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/device/getAll", wrapper.GetAllDevices)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/device/getDone", wrapper.GetDeviceDoneRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/request/getAllDone", wrapper.GetAllDoneRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/request/getAllRejected", wrapper.GetAllRejectedRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/source/getAll", wrapper.GetAllSources)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/source/getGenerated", wrapper.GetAllGenRequests)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWQW/bOgz+KwbfO7p22od38WnZWgQFhq5LCuww9KDYtKPCklxKThAU+e8DZSVummzO",
	"sB6CnWLQH0Xy+z4xfoHcqMZo1M5C9gI2X6AS/nGKz99mN/zUkGmQnEQfR13wT2lICQcZFMLhhZMKIQa3",
	"bhAysI6krmATA+Fzi9Zxwr+EJWTwT9pXTEO5dBpgmxisE+ROLbDZRcz8CXN/APf9cNj273fiS/5ZI9uK",
	"R1u5a9UciQMhVWqHFZJnwbSU488Rh/U4JHVpGJ0b7UTuK6MSsoYMRCMdCvXBrkRVISXSQAxa8IQw62LR",
	"+P42ekChIIaWOGnhXGOzNH2VtImhQJuTbJw0GjIYa59XGoq+ttii1FU0W1uHfEwtc9TWsxhqjRuRLzC6",
	"SkYHVVarVSL868RQlYZcm36+/XRzN7u5uEpGycKp2muDpOyXcoa0lDkebTX1mJS1kq5mzMQcaXGJZLtJ",
	"LpNRMuLDTYNaNBIy+M+HYmiEW3jp0nlblkhphW5c1xyp0PPM+gqm5LbgSv71R4+1wNfANoaHYejVaLQV",
	"CbVPFk1Ty9ynp0+Wm9neRH6SDpU9bpMQEURi3VlgX5wJukjUdTRvy7tWWe8b2yolaL19y6mRKbewEinS",
	"3nYden/gezI5WovF8OQ7aLgG1tNIQqHjs7PvLyDq2qymaJGWfKKjFtnDkMFzi7TuDdq1D906kdSDe5IO",
	"Lsjje7E+sC14R56oRLNj74gOdR2FvWB7YDRfB1E6MQpku5/mvmuPPQf3Fbg8xX3dcPvu6we+Nhp/NXE3",
	"LqPewXBdx2dquIdTua9QM0lY7Jw1ZLzCaGTPdbR3EoSXwXRDMgTIKw3OjBTvNB5zgJNDzBsmpsh/vIOr",
	"cAs7b0YodDnslGO4tPtcOW0vzTz2HPbS7iNrcDV1yP3V1M882d6zgcknqN9hN+26/hvXUwz/jy65ylu4",
	"RpJ5hESGhpZYf+58HZTrWvDcBrr3Pz0rc2GVSYSo0ZllQm3K33+bx82PAAAA//9gnIWKIA0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
