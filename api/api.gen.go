// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// APIBuffer defines model for APIBuffer.
type APIBuffer struct {
	BufNum    int      `json:"bufNum"`
	Current   *ReqWT   `json:"current,omitempty"`
	Processed []ReqWSE `json:"processed"`
}

// APIDevice defines model for APIDevice.
type APIDevice struct {
	Current *ReqWT   `json:"current,omitempty"`
	DevNum  int      `json:"devNum"`
	Done    []ReqWSE `json:"done"`
}

// APISource defines model for APISource.
type APISource struct {
	Generated []ReqWT `json:"generated"`
	SourceNum int     `json:"sourceNum"`
}

// DevicePivotInfo defines model for DevicePivotInfo.
type DevicePivotInfo struct {
	Name      string  `json:"name"`
	UsageCoef float64 `json:"usageCoef"`
}

// PivotInfo defines model for PivotInfo.
type PivotInfo struct {
	DevicesPivotInfo []DevicePivotInfo `json:"devicesPivotInfo"`
	SourcesPivotInfo []SourcePivotInfo `json:"sourcesPivotInfo"`
}

// ReqWSE defines model for ReqWSE.
type ReqWSE struct {
	End     time.Time `json:"end"`
	Request Request   `json:"request"`
	Start   time.Time `json:"start"`
}

// ReqWT defines model for ReqWT.
type ReqWT struct {
	Request Request   `json:"request"`
	Time    time.Time `json:"time"`
}

// Request defines model for Request.
type Request struct {
	RequestNumber int `json:"requestNumber"`
	SourceNumber  int `json:"sourceNumber"`
}

// SourcePivotInfo defines model for SourcePivotInfo.
type SourcePivotInfo struct {
	Name               string  `json:"name"`
	ProcTime           string  `json:"procTime"`
	ProcTimeDispertion string  `json:"procTimeDispertion"`
	RejChance          float64 `json:"rejChance"`
	ReqCount           int     `json:"reqCount"`
	SysTime            string  `json:"sysTime"`
	WaitTime           string  `json:"waitTime"`
	WaitTimeDispertion string  `json:"waitTimeDispertion"`
}

// SystemParameters defines model for SystemParameters.
type SystemParameters struct {
	BuffersCount    int    `json:"buffersCount"`
	DevA            string `json:"devA"`
	DevB            string `json:"devB"`
	DevicesCount    int    `json:"devicesCount"`
	IterationsCount *int   `json:"iterationsCount,omitempty"`
	SourcesCount    int    `json:"sourcesCount"`
	SourcesLambda   string `json:"sourcesLambda"`
	StepMode        bool   `json:"stepMode"`
}

// WaveInfo defines model for WaveInfo.
type WaveInfo struct {
	Buffers   []APIBuffer `json:"buffers"`
	Devices   []APIDevice `json:"devices"`
	Done      []ReqWSE    `json:"done"`
	EndTime   time.Time   `json:"endTime"`
	Rejected  []ReqWSE    `json:"rejected"`
	Sources   []APISource `json:"sources"`
	StartTime time.Time   `json:"startTime"`
}

// InitSystemJSONRequestBody defines body for InitSystem for application/json ContentType.
type InitSystemJSONRequestBody = SystemParameters

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Do step
	// (POST /doStep)
	DoStep(w http.ResponseWriter, r *http.Request)
	// Get info for pivot table
	// (GET /getPivotInfo)
	GetPivotInfo(w http.ResponseWriter, r *http.Request)
	// Get all info for waveform
	// (GET /getWaveInfo)
	GetWaveNumber(w http.ResponseWriter, r *http.Request)
	// Create new system
	// (POST /initSystem)
	InitSystem(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DoStep operation middleware
func (siw *ServerInterfaceWrapper) DoStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DoStep(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPivotInfo operation middleware
func (siw *ServerInterfaceWrapper) GetPivotInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPivotInfo(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWaveNumber operation middleware
func (siw *ServerInterfaceWrapper) GetWaveNumber(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWaveNumber(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InitSystem operation middleware
func (siw *ServerInterfaceWrapper) InitSystem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InitSystem(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/doStep", wrapper.DoStep)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/getPivotInfo", wrapper.GetPivotInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/getWaveInfo", wrapper.GetWaveNumber)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/initSystem", wrapper.InitSystem)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXXW/iOBf+K5Hf95ImbPeOq6W0qpBmu+yANBejuTDJSXCV2Bn7OAhV/PeV7UBc4jCh",
	"272D5Hw8z/nOG0lFVQsOHBWZvRGV7qCi9ud8tXzQeQ7S/KmlqEEiA/tqq/MXXZlfeKiBzAjjCAVIcpyQ",
	"VEsJHM3L/0vIyYz8L+l8JK2D5Cv8/LYx8rUUKSgFmdFgCJUao7p+MrqtdyolPZDjcUIk/NRMGlvfTyB9",
	"Dz/OKmL7CikaG/PV8hEalkKf5q1UMmgGw5IJDp/NsPXXGh8gtxZahsgVwEFSvDHumz6oCVHWxQD1C8yd",
	"7MSDEMLusrJijcAlz0WfAacVeB4VSsYLo6kVLWAhDJM3kgtZUSQzkgm9LYGcPXFdbQMArVXfRgjbFVSZ",
	"ha3eSYwK7yXfwUB/wLYrgiu2g1nyHE36vEJxaQu3FxTg2ftcUIQ7ZJWXji59BgioMW1nxUxckEoc6+CC",
	"6snbycrEgh0it+lzux2uxfVv0VrxAZgnPEGgL67ug1Pq3J0DEkPNbMQnFw5C2C7rcHxPmyG+6cVNS4pM",
	"8FAVnRQembL2BR+tKuF1saM8hVHzw/JeCO0WRSCmB3UT8D1l+CGFm5mGJ9+ZjR+IjoYH0MtKEEUwCcGy",
	"OCiEakUlrQBBquDFkYNUV8KcQTMfHbIMmodbhM3ku+KbITj1a0LtTP21xBdabTM6Gp5CqP8Umd82WyFK",
	"oHxorJ/S+y6oFzwv0bQBbkPneQ3l8xttINzfrcvRi6s7QgPrsAV8i7H21AsZ+4wDzS6PzQ3j3fYYpPgJ",
	"5+85Y7fEo70OQ8bMNtx8fFN1+l1QOojn4uvqjnixGDxpjRfWVlYqONLU9hJUlJUGfc0QaPWH2tOiABkz",
	"c7m4nULW7lk0Xy2jDVBzgGpplHaItZoliadki0ulktVunJI5t3q5kNHfGjQwXkRuapEJKVkKXEG3v8i8",
	"pukOovt42vOy3+9jal/HQhZJq6uSL8vF08v66e4+nsY7rEqbE5CV+itfg3QfKAGoiZVJ7EGApZF5FgGI",
	"DUjlmPwWT+OpMS5q4LRmZEZ+t48mpKa4s0WTZGKNUNv2Fe6UME1sR9AyIzPy6N6bjKlaGPxG5n46dRew",
	"H7m1Ts3Xl60PpauKyoM1EJkJYp8mBeC7k6CAgMtnXyjs2BRE+71G67pkqdVOXpXbiK7sf9UU3pF87JVB",
	"mMwzYGSK0pZHbfQjpOZWOLHz5+EQOSPjXVL/EbszkgC5r4Ba8sjdNZHIo/aeC9GlZdlR3tMGzIRwfBln",
	"2NbdYP0sO5nz2fggssOn8exdFKFkWpmo7oT8CYZSw/HjBb6QQBEiDvtIOaIWgQLZ2P33/e1iLhTiTlUi",
	"prQEFE0sdWKa8/jj+E8AAAD//2UMVj6jEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
